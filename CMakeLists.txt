cmake_minimum_required(VERSION 3.10)
project(ScreenCaptureProject)

set(CMAKE_CXX_STANDARD 20)

set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

#FFMPEG dependencies
if(WIN32)
    set(FFMPEG_ROOT "${CMAKE_SOURCE_DIR}/libs/ffmpeg")
endif()
message(${FFMPEG_ROOT})
FIND_PACKAGE( FFmpeg )
IF ( MINGW AND CMAKE_TOOLCHAIN_FILE)
    PKG_CHECK_MODULES (FFMPEG_PKG REQUIRED libavcodec libavfilter libavutil libavdevice libavformat libavformat libswscale)
    IF (FFMPEG_PKG_FOUND)
        MESSAGE( "FFmpeg cflags found through pkg-config: ${FFMPEG_PKG_CFLAGS}" )
        MESSAGE( "FFmpeg ldflags found through pkg-config: ${FFMPEG_PKG_LDFLAGS}" )
        STRING(REGEX REPLACE ";" " " FFMPEG_PKG_CFLAGS "${FFMPEG_PKG_CFLAGS}")
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${FFMPEG_PKG_CFLAGS}")
        SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${FFMPEG_PKG_CFLAGS}")
        SET(FFMPEG_LIBRARIES ${FFMPEG_LIBRARY} ${FFMPEG_PKG_LDFLAGS})
        MESSAGE("FFMPEG_LIBRARIES ${FFMPEG_LIBRARIES}")
    ELSE (FFMPEG_PKG_FOUND)
        MESSAGE( FATAL_ERROR "FFmpeg cflags/ldflags not found through pkg-config." )
    ENDIF (FFMPEG_PKG_FOUND)
ENDIF()
IF(FFMPEG_LIBAVFORMAT_FOUND)
    MESSAGE(STATUS "avformat library found: ${FFMPEG_LIBAVFORMAT_LIBRARIES}")
ELSE()
    MESSAGE(STATUS "avformat library not found.")
ENDIF()
IF(FFMPEG_LIBAVCODEC_FOUND)
    MESSAGE(STATUS "avcodec library found: ${FFMPEG_LIBAVCODEC_LIBRARIES}")
ELSE()
    MESSAGE(STATUS "avcodec library not found.")
ENDIF()
IF(FFMPEG_LIBAVUTIL_FOUND)
    MESSAGE(STATUS "avutil library found: ${FFMPEG_LIBAVUTIL_LIBRARIES}")
ELSE()
    MESSAGE(STATUS "avutil library not found.")
ENDIF()
IF(FFMPEG_LIBSWSCALE_FOUND)
    MESSAGE(STATUS "swscale library found: ${FFMPEG_LIBSWSCALE_LIBRARIES}")
ELSE()
    MESSAGE(STATUS "swscale library not found.")
ENDIF()
IF(FFMPEG_LIBSWRESAMPLE_FOUND)
    MESSAGE(STATUS "swresample library found: ${FFMPEG_LIBSWRESAMPLE_LIBRARIES}")
ELSE()
    MESSAGE(STATUS "swresample library not found.")
ENDIF()
IF(FFMPEG_FOUND)
    INCLUDE_DIRECTORIES(${FFMPEG_INCLUDE_DIR} ${FFMPEG_INCLUDE_DIRS})
    MESSAGE("Found all FFmpeg libraries in ${FFMPEG_LIBRARIES}.")
    MESSAGE("Found all FFmpeg dlls in ${FFMPEG_DLL}.")
ELSE()
    MESSAGE(FATAL_ERROR "Some FFmpeg libraries are missing.")
ENDIF()

set(SOURCE_FILES main.cpp ScreenRecorder.cpp ThreadStructures.cpp AudioInput.cpp VideoInput.cpp)
set(HEADER_FILES include)
add_executable(ScreenCaptureProject ${SOURCE_FILES} ${HEADER_FILES})

target_link_libraries(
        ScreenCaptureProject
        ${FFMPEG_LIBRARIES}
)
